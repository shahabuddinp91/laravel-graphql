scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")
extend type Query{
    users: [User!]! @all #its for all user info
    paginateusers: [User!]! @paginate #its for all user info with paginate
    user(id: ID @eq): User @find #its for single user info
    userPost(id: ID @eq): User @find #its for user wise post info
}


type Mutation {
# ============= its for user create mutation =============
    createUser(name: String!, email: String!, password: String!): User! @create

    
# ============= its for user create mutation with validation =============
    createUserWithvalidation(
        name: String!
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @rules(apply: ["min:8"])
    ): User! @create

# ============= its for user update mutation =============
     updateUser(id: ID!, name: String, email: String, password: String): User! @update

# ============= its for user delete mutation =============
     deleteUser(id: ID!): User @delete

# ============= its for upsertUser mutation =============
     upsertUser(id: ID!, name: String!, email: String!, password: String!): User! @upsert

    #  ================= its for update user avatar mutation ==============
    updateUserAvatar(image: Upload!, id: ID!): User
}



type User {
    id: ID
    name: String
    email: String
    email_verified_at: String
    posts: [Post]! @hasMany
    avatar: String
}

# type User {
#     id: ID!
#     name: String!
#     email: String!
#     email_verified_at: DateTime!
#     created_at: DateTime!
#     updated_at: DateTime!
# }
